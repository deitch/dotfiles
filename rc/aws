# setting for AWS, expected to be source by a profile

# to set AWS profile
function set_aws_env {
    if [[ -f ~/.aws/credentials  || -f ~/.aws/config ]]; then
        if [[ -z "$1" ]]; then
            # what is the current profile?
            for p in $(awk '/^\[profile/ {print $2}' ~/.aws/config | tr -d ']' | sort | uniq); do
              if [ "$p" = "$AWS_DEFAULT_PROFILE" ]; then
                 echo "*$p"
              else
                 echo " $p"
              fi
            done
        else
            #Need to use eval otherwise it's in the context of a subshell
            eval export AWS_DEFAULT_PROFILE=$1
            eval export AWS_PROFILE=$1
            eval export AWS_ACCESS_KEY_ID=`aws configure --profile $1 get aws_access_key_id`
            eval export AWS_SECRET_ACCESS_KEY=`aws configure --profile $1 get aws_secret_access_key`
            #This loads from config which has a different convention than the credentials files
            eval export AWS_DEFAULT_REGION=`aws configure get --profile $1 region`
        fi
    else
        echo "Please run 'aws configure' to set your aws credentials"
    fi
}
# to clear AWS profile
function clear_aws_env {
    #Need to use eval otherwise it's in the context of a subshell
    eval unset AWS_DEFAULT_PROFILE
    eval unset AWS_PROFILE
    eval unset AWS_ACCESS_KEY_ID
    eval unset AWS_SECRET_ACCESS_KEY
    eval unset AWS_DEFAULT_REGION
}
export set_aws_env
export clearset_aws_env

function aws-sso() {
  # first try to see if we can get the identity
  aws sts get-caller-identity >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    aws sso login
  fi
  aws $@
}
